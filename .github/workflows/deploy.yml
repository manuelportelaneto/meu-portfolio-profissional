# Nome do nosso workflow. Aparecerá na aba "Actions" do GitHub.
name: Deploy to Hostinger

# Gatilho: Este workflow roda toda vez que houver um push na branch 'main'.
on:
  push:
    branches: [ main ]

# Tarefas: A lista de coisas que o workflow vai fazer.
jobs:
  build-and-deploy:
    # Usaremos uma máquina virtual com a última versão do Ubuntu.
    runs-on: ubuntu-latest

    # Passos: A sequência de ações a serem executadas.
    steps:
    # Passo 1: Baixa o código do seu repositório para a máquina virtual.
    - name: Checkout code
      uses: actions/checkout@v3

    # Passo 2: Configura o ambiente Node.js.
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    # Passo 3: Instala as dependências do projeto.
    - name: Install dependencies
      run: npm install

    # Passo 4: Constrói o projeto para produção. Cria a pasta 'dist'.
    - name: Build project
      run: npm run build
      env:
        VITE_BASE: './' 

    # === NOVO PASSO DE DEPURAÇÃO - A PROVA FINAL ===
    # Usaremos uma ação mais simples, focada apenas em listar os arquivos.
    - name: List files in FTP root directory
      uses: pcalouche/ftp-action@v1.1.1
      with:
        host: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        # O comando que queremos executar. Simples e direto.
        command: ls -la
        
    # Passo Final: Implanta os arquivos na Hostinger usando FTP.
    - name: FTP Deploy
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./dist/
        # Continuamos com nossa aposta mais provável. O debug acima vai confirmar.
        server-dir: ./public_html/
        dangerous-clean-slate: true```